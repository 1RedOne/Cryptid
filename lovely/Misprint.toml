[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Randomize poker hands after RNG is set up
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.pseudorandom.hashed_seed = pseudohash(self.GAME.pseudorandom.seed)"
position = "after"
payload = '''
if G.GAME.modifiers.cry_misprint_min and not args.savetext then
    for k, v in pairs(G.GAME.hands) do
        v.chips = Big:new(cry_format(v.chips * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g"))
        v.mult = Big:new(cry_format(v.mult * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g"))
        v.l_chips = cry_format(v.l_chips * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g")
        v.l_mult = cry_format(v.l_mult * cry_log_random(pseudoseed('cry_misprint'),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2g")
        v.s_chips = v.chips
        v.s_mult = v.mult
    end
end
'''
match_indent = true

# Packs
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "create_shop_card_ui(card, 'Booster', G.shop_booster)"
position = "before"
payload = '''
cry_misprintize(card)
'''
match_indent = true

# Prevent pack softlocks
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.pack_choices = self.config.center.config.choose or 1"
position = "after"
payload = '''
if G.GAME.modifiers.cry_misprint_min then
    if G.GAME.pack_size < 1 then G.GAME.pack_size = 1 end
    G.GAME.pack_choices = math.min(math.floor(G.GAME.pack_size),cry_format(G.GAME.pack_choices * cry_log_random(pseudoseed('cry_misprint_p'..G.GAME.round_resets.ante),G.GAME.modifiers.cry_misprint_min,G.GAME.modifiers.cry_misprint_max),"%.2f"))
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name:find('Arcana') then"
position = "before"
payload = '''
if self.ability.extra < 1 then self.ability.extra = 1 end
'''
match_indent = true

# Vouchers
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "create_shop_card_ui(card, 'Voucher', G.shop_vouchers)"
position = "before"
payload = '''
cry_misprintize(card)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "create_shop_card_ui(card, 'Voucher', G.shop_vouchers)"
position = "before"
payload = '''
cry_misprintize(card)
'''
match_indent = true

# Fractional Ante Bugs
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.ante = G.GAME.round_resets.ante + mod"
position = "after"
payload = "G.GAME.round_resets.ante = Big:new(G.GAME.round_resets.ante):floor():to_number()"
match_indent = true

# UI Bugs
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_size*G.CARD_W,"
position = "at"
payload = "math.max(1,math.min(_size,5))*G.CARD_W,"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_size*G.CARD_W*1.1,"
position = "at"
payload = "math.max(1,math.min(_size,5))*G.CARD_W*1.1,"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "_size*G.CARD_W*1.1 + 0.5,"
position = "at"
payload = "math.max(1,math.min(_size,5))*G.CARD_W*1.1 + 0.5,"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{card_limit = _size, type = 'consumeable', highlight_limit = 1}"
position = "at"
payload = "{card_limit = math.max(1,_size), type = 'consumeable', highlight_limit = 1}"
match_indent = true

# Death
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.consumeable.mod_num >= #G.hand.highlighted and #G.hand.highlighted >= (self.ability.consumeable.min_highlighted or 1) then"
position = "at"
payload = "if self.ability.consumeable.mod_num >= #G.hand.highlighted then"
match_indent = true

# mod_num has no limit
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.consumeable.mod_num = math.min(5, self.ability.consumeable.max_highlighted)"
position = "at"
payload = "self.ability.consumeable.mod_num = self.ability.consumeable.max_highlighted"
match_indent = true

# Infinite Deck
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "self.config.highlighted_limit = config.highlight_limit or 5"
position = "at"
payload = "self.config.highlighted_limit = config.highlight_limit or G.GAME.modifiers.cry_highlight_limit or 5"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then"
position = "at"
payload = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play then"
match_indent = true

# Hieroglyph
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ease_ante(-center_table.extra)"
position = "at"
payload = "ease_ante(math.floor(-center_table.extra))"
match_indent = true
