local achievement_atlas = {
    object_type = "Atlas",
    key = "achievements",
    path = "cry_achievements.png",
    px = 66,
    py = 66,
}

local used_crash = {
    object_type = "Achievement",
    key = "used_crash",
    loc_txt = {
        name = "We Told You Not To",
        description = "Use ://CRASH",
    },
    unlock_condition = function(self, args)
        if G.PROFILES[G.SETTINGS.profile].consumeable_usage["c_cry_crash"] and G.PROFILES[G.SETTINGS.profile].consumeable_usage["c_cry_crash"].count > 0 and not G.ACHIEVEMENTS['ach_cry_used_crash'].earned then 
            unlock_achievement('ach_cry_used_crash')
        end
    end,
}

local achievement_objects = {achievement_atlas, used_crash}
return {name = "Achievements",
        init = function()
            -- TODO: Make this injected
            function unlock_achievement(achievement_name)
                if G.PROFILES[G.SETTINGS.profile].all_unlocked then return end
                G.E_MANAGER:add_event(Event({
                    no_delete = true,
                    blockable = false,
                    blocking = false,
                    func = function()
                        if G.STATE ~= G.STATES.HAND_PLAYED then 
                            if G.PROFILES[G.SETTINGS.profile].all_unlocked then return end
                            local achievement_set = false
                            --if G.F_NO_ACHIEVEMENTS then return end
            
                            --|LOCAL SETTINGS FILE
                            --|-------------------------------------------------------
                            if not G.ACHIEVEMENTS then fetch_achievements() end
            
                            G.SETTINGS.ACHIEVEMENTS_EARNED[achievement_name] = true
                            G:save_progress()
                            if G.ACHIEVEMENTS[achievement_name] then 
                                if not G.ACHIEVEMENTS[achievement_name].earned then
                                    --|THIS IS THE FIRST TIME THIS ACHIEVEMENT HAS BEEN EARNED
                                    achievement_set = true
                                    G.FILE_HANDLER.force = true
                                end
                                G.ACHIEVEMENTS[achievement_name].earned = true
                            end
                            --|-------------------------------------------------------
            
            
                            --|STEAM ACHIEVEMENTS
                            --|-------------------------------------------------------
                            -- Note: intended behavior has this not used if G.STEAM is true. Investigate why later
                            -- Also verify if it is safe to let achievements interact with G.STEAM functions
                            -- As long as the ID doesn't match one already existing in Balatro would it be fine?
                            if G.STEAM and not G.ACHIEVEMENTS[achievement_name].mod then 
                                if G.ACHIEVEMENTS[achievement_name] then 
                                    if not G.ACHIEVEMENTS[achievement_name].earned then
                                        --|THIS IS THE FIRST TIME THIS ACHIEVEMENT HAS BEEN EARNED
                                        achievement_set = true
                                        G.FILE_HANDLER.force = true
                                        local achievement_code = G.ACHIEVEMENTS[achievement_name].steamid
                                        local success, achieved = G.STEAM.userStats.getAchievement(achievement_code)
                                        if not success or not achieved then
                                            G.STEAM.send_control.update_queued = true
                                            G.STEAM.userStats.setAchievement(achievement_code)
                                        end
                                    end
                                    G.ACHIEVEMENTS[achievement_name].earned = true
                                end
                            end
                            --|-------------------------------------------------------
            
                            --|Other platforms
                            --|-------------------------------------------------------
            
                            --|-------------------------------------------------------
            
                            if achievement_set then notify_alert(achievement_name) end
                            return true
                        end
                    end
                    }), 'achievement')
            end
            
            -- TODO: Proper UI. Something like pages w/ trophies and their name/desc beneath them instead of hovered. 
            function create_UIBox_your_collection_achievements(exit)
                fetch_achievements()
                local achievements_pool = {}
                if G.ACTIVE_MOD_UI then
                    for k, v in pairs(G.ACHIEVEMENTS) do
                        if v.mod and G.ACTIVE_MOD_UI.id == v.mod.id then achievements_pool[#achievements_pool+1] = v end
                    end
                else
                    for k, v in pairs(G.ACHIEVEMENTS) do
                        if v.mod then achievements_pool[#achievements_pool+1] = v end
                    end
                end
                local achievement_matrix = {
                    {},{},{},{},{},{},
                }
                local achievement_tab = {}
                for k, v in pairs(achievements_pool) do
                    achievement_tab[#achievement_tab+1] = v
                end
                
                table.sort(achievement_tab, function(a, b) return a.order < b.order end)
                
                for k, v in ipairs(achievement_tab) do
                    local s = 1.3*1.25*1.25
                    if math.ceil(#achievement_tab/6) > 6 then
                        s = s * 6/math.ceil(#achievement_tab/6)
                    end
                    local temp_achievement = Sprite(0,0,1,1,G.ASSET_ATLAS["cry_achievements"], v.earned and {x=0, y=0} or {x=1, y=0})
                    temp_achievement:define_draw_steps({
                        {shader = 'dissolve', shadow_height = 0.05},
                        {shader = 'dissolve'}
                    })
                    if k == 1 then 
                        G.E_MANAGER:add_event(Event({
                        trigger = 'immediate',
                        func = (function()
                            G.CONTROLLER:snap_to{node = temp_achievement}
                            return true
                        end)
                        }))
                    end
                    temp_achievement.float = true
                    temp_achievement.states.hover.can = true
                    temp_achievement.states.drag.can = false
                    temp_achievement.states.collide.can = true
                    --temp_achievement.config = {blind = v, force_focus = true}
                    temp_achievement.hover = function()
                        if not G.CONTROLLER.dragging.target or G.CONTROLLER.using_touch then 
                            if not temp_achievement.hovering and temp_achievement.states.visible then
                                temp_achievement.hovering = true
                                temp_achievement.hover_tilt = 3
                                temp_achievement:juice_up(0.05, 0.02)
                                play_sound('chips1', math.random()*0.1 + 0.55, 0.12)
                                temp_achievement.config.h_popup = create_UIBox_achievement_popup(v)
                                temp_achievement.config.h_popup_config ={align = 'cl', offset = {x=-0.1,y=0},parent = temp_achievement}
                                Node.hover(temp_achievement)
                                if temp_achievement.children.alert then 
                                    temp_achievement.children.alert:remove()
                                    temp_achievement.children.alert = nil
                                    v.alerted = true
                                    G:save_progress()
                                end
                            end
                        end
                        temp_achievement.stop_hover = function() temp_achievement.hovering = false; Node.stop_hover(temp_achievement); temp_achievement.hover_tilt = 0 end
                    end
                    local achievement_per_row = math.ceil(#achievement_tab / 6)
                    local row = math.ceil((k - 1) / achievement_per_row + 0.001)
                    table.insert(achievement_matrix[row], {
                        n = G.UIT.C,
                        config = { align = "cm", padding = 0.1 },
                        nodes = {
                            ((k - achievement_per_row) % (2 * achievement_per_row) == 1) and { n = G.UIT.B, config = { h = 0.2, w = 0.5 } } or nil,
                            { n = G.UIT.O, config = { object = temp_achievement, focus_with_object = true } },
                            ((k - achievement_per_row) % (2 * achievement_per_row) == 0) and { n = G.UIT.B, config = { h = 0.2, w = 0.5 } } or nil,
                        }
                    })
                end
                
                local achievements_options = {}
                for i = 1, math.floor(#achievements_pool/7) do
                    table.insert(achievements_options, localize('k_page')..' '..tostring(i)..'/'..tostring(math.floor(#achievements_pool/7)))
                end
            
                local extras = nil
                local t = {
                    {n=G.UIT.C, config={align = "cm", r = 0.1, colour = G.C.BLACK, padding = 0.1, emboss = 0.05}, nodes={
                    {n=G.UIT.C, config={align = "cm"}, nodes={
                    {n=G.UIT.R, config={align = "cm"}, nodes={
                        {n=G.UIT.R, config={align = "cm"}, nodes=achievement_matrix[1]},
                        {n=G.UIT.R, config={align = "cm"}, nodes=achievement_matrix[2]},
                        {n=G.UIT.R, config={align = "cm"}, nodes=achievement_matrix[3]},
                        {n=G.UIT.R, config={align = "cm"}, nodes=achievement_matrix[4]},
                        {n=G.UIT.R, config={align = "cm"}, nodes=achievement_matrix[5]},
                        {n=G.UIT.R, config={align = "cm"}, nodes=achievement_matrix[6]},
                    }}
                    }}
                }}  
                }
                return {
                    n = G.UIT.ROOT,
                    config = {
                        emboss = 0.05,
                        minh = 6,
                        r = 0.1,
                        minw = 6,
                        align = "tm",
                        padding = 0.2,
                        colour = G.C.BLACK
                    },
                    nodes = t
                }
            end
            
            function create_UIBox_achievement_popup(achievement, vars)
                local achievement_text = {}
                
                local loc_target = {localize(achievement.key, 'achievement_descriptions')}
                local loc_name = localize(achievement.key, 'achievement_names')
                
                local ability_text = {}
                if loc_target then 
                    for k, v in ipairs(loc_target) do
                        ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}
                    end
                end
                achievement_text[#achievement_text + 1] =
                {n=G.UIT.R, config={align = "cm", emboss = 0.05, r = 0.1, minw = 2.5, padding = 0.07, colour = G.C.WHITE}, nodes={
                    ability_text[1] and {n=G.UIT.R, config={align = "cm", padding = 0.08, colour = G.C.GREY, r = 0.1, emboss = 0.05, minw = 2.5, minh = 0.9}, nodes=ability_text} or nil
                }}
                    return {n=G.UIT.ROOT, config={align = "cm", padding = 0.05, colour = lighten(G.C.JOKER_GREY, 0.5), r = 0.1, emboss = 0.05}, nodes={
                        {n=G.UIT.R, config={align = "cm", emboss = 0.05, r = 0.1, minw = 2.5, padding = 0.1, colour = G.C.GREY}, nodes={
                        {n=G.UIT.O, config={object = DynaText({string = loc_name, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, spacing = 2, bump = true, scale = 0.4})}},
                    }},
                    {n=G.UIT.R, config={align = "cm"}, nodes=achievement_text},
                }}
            end
        end,
        items = achievement_objects}